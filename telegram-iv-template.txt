# Telegram Instant View Template for Pavlenko.Tech Blog
# This template transforms Pavlenko.Tech blog posts into Telegram Instant View pages

# Place the version at the beginning of template. Always use the latest available version.
~version: "2.1"

### STEP 1: Define which pages get Instant View and which don't

# Применяем шаблон только для статических страниц постов
?path: /posts/.+

# Генерируем IV только для страниц со статьёй
?exists: //article[contains(@class, "post")]

# Информация о сайте для IV-страницы
site_name: "Pavlenko.Tech"
#channel: https://t.me/pavlenkodev

### STEP 2: Define the essential elements

# Обязательные свойства для корректной работы IV-страниц
body: //div[contains(@class, "post-content")]
title: //article[contains(@class, "post")]/header[contains(@class, "post-header")]/h1
author: //span[contains(@class, "post-author")]/text()
published_date: //div[contains(@class, "post-meta")]/time

# Определяем переменную для статьи для повторного использования
$article: //article[contains(@class, "post")]

# Поиск обложки, если она есть
cover: $article//img[1]

# Описание для превью при шаринге в Telegram
description: //*[contains(@class, "post-summary")]

### STEP 3: Handle language direction and special formatting

# Поддержка RTL для языков (арабский, иврит, персидский)
@set_attr(dir, rtl): //html[@dir="rtl" or @lang="ar" or @lang="he" or @lang="fa"]

# Корректное оформление блоков кода
@replace_tag(<pre>): //pre/code
@set_attr(class, @class): //pre/code[@class]

# Форматирование цитат и ссылок в блоках цитат
@wrap(<blockquote>): //blockquote
@wrap(<cite>): //blockquote//cite

### STEP 4: Process images and media

# Оформление изображений с подписями
@wrap(<figure>): //img
@wrap(<figure>): //img[@alt and not(parent::figure)]
@append(<figcaption>): //img[@alt]/@alt

# Исправление относительных путей для изображений – теперь обновляем атрибут src напрямую
$rel_img: //img[@src and (not(starts-with(@src, "http://")) and not(starts-with(@src, "https://")))]
@set_attr(src, concat("https://pavlenko.tech/", @src)): $rel_img

### STEP 5: Format text elements

# Обработка заголовков
@wrap(<h2>): //h2
@wrap(<h3>): //h3
@wrap(<h4>): //h4

# Оформление списков
@wrap(<ul>): //ul
@wrap(<ol>): //ol

# Исправление относительных ссылок – обновляем href напрямую
$rel_links: //a[@href and not(starts-with(@href, "http")) and not(starts-with(@href, "https")) and not(starts-with(@href, "#"))]
@set_attr(href, concat("https://pavlenko.tech/", @href)): $rel_links

# Добавление блока "related articles" для тегов
@wrap_inner(<related>): //div[contains(@class, "post-tags")]/a

### STEP 6: Handle tables and special elements

# Корректное оформление таблиц
@wrap(<table>): //table

### STEP 7: Cleanup - remove unnecessary elements

# Удаление элементов, не нужных для IV
@remove: //div[contains(@class, "social-share")]
@remove: //div[contains(@class, "table-of-contents")]
@remove: //script

### STEP 8: Mark unsupported content

# Отмечаем сложный или неподдерживаемый контент, чтобы избежать ошибок в IV
@unsupported: //iframe
@unsupported: //form
@unsupported: //canvas
@unsupported: //div[contains(@class, "interactive-element")]